package DataStructuresAlgorithms.Graphs.Deep.Self;

import java.util.Stack;

public class GraphSelf {
    private int MAX_VERTS = 10;
    private Vertex arrayVertex[];
    private int adjMat[][];
    private Stack<Integer> stack;
    private int nVertex;

    GraphSelf() {
        nVertex = 0;
        arrayVertex = new Vertex[MAX_VERTS];
        adjMat = new int[MAX_VERTS][MAX_VERTS];
        for (int i = 0; i < MAX_VERTS; i++) {
            for (int j = 0; j < MAX_VERTS; j++) {
                adjMat[i][j] = 0;
            }
        }
        stack = new Stack<>();
    }

    public void findAllVertexInGraph() {
        stack.push(0);
        printVertex(arrayVertex[0]);
        arrayVertex[0].setWasWisited();

        while (!stack.empty()) {
            int v = findNotWisitedVertex(stack.peek());
            if (v == -1) {
                stack.pop();
            } else {
                stack.push(v);
                printVertex(arrayVertex[v]);
                arrayVertex[v].setWasWisited();
            }
        }
    }

    private void printVertex(Vertex vertex) {
        System.out.println(vertex.getaChar());
    }

    public void addVertex(char aChar) {
        arrayVertex[nVertex++] = new Vertex(aChar);
    }

    public void addEdge(int start, int end) {
        adjMat[start][end] = 1;
        adjMat[end][start] = 1;
    }

    private int findNotWisitedVertex(int v) {
        for (int i = 0; i < MAX_VERTS; i++) {
            if (adjMat[v][i] == 1 && arrayVertex[i].isWasWisited() == false) {
                return i;
            }
        }
        return -1;
    }

}
